/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var path = require('path');
var fs = require('fs');
var basePathTransformer_1 = require('./basePathTransformer');
var logger = require('../logger');
var utils = require('../utils');
var errors = require('../errors');
/**
 * Converts a local path from Code to a path on the target.
 */
var RemotePathTransformer = (function (_super) {
    __extends(RemotePathTransformer, _super);
    function RemotePathTransformer() {
        _super.apply(this, arguments);
    }
    RemotePathTransformer.prototype.attach = function (args) {
        var _this = this;
        // Maybe validate that it's absolute, for either windows or unix
        this._remoteRoot = args.remoteRoot;
        // Validate that localRoot is absolute and exists
        var localRootP = Promise.resolve();
        if (args.localRoot) {
            var localRoot_1 = args.localRoot;
            if (!path.isAbsolute(localRoot_1)) {
                return Promise.reject(errors.attributePathRelative('localRoot', localRoot_1));
            }
            localRootP = new Promise(function (resolve, reject) {
                fs.exists(localRoot_1, function (exists) {
                    if (!exists) {
                        reject(errors.attributePathNotExist('localRoot', localRoot_1));
                    }
                    _this._localRoot = localRoot_1;
                    resolve();
                });
            });
        }
        return localRootP;
    };
    RemotePathTransformer.prototype.setBreakpoints = function (args) {
        if (args.source.path) {
            args.source.path = this.getTargetPathFromClientPath(args.source.path);
        }
        return _super.prototype.setBreakpoints.call(this, args);
    };
    RemotePathTransformer.prototype.scriptParsed = function (scriptPath) {
        scriptPath = this.getClientPathFromTargetPath(scriptPath);
        return _super.prototype.scriptParsed.call(this, scriptPath);
    };
    RemotePathTransformer.prototype.stackTraceResponse = function (response) {
        var _this = this;
        response.stackFrames.forEach(function (frame) {
            var remotePath = frame.source.path;
            if (remotePath) {
                var localPath = _this.getClientPathFromTargetPath(remotePath);
                if (utils.existsSync(localPath)) {
                    frame.source.path = localPath;
                    frame.source.sourceReference = undefined;
                }
            }
        });
    };
    RemotePathTransformer.prototype.shouldMapPaths = function (remotePath) {
        // Map paths only if localRoot/remoteRoot are set, and the remote path is absolute on some system
        return !!this._localRoot && !!this._remoteRoot && (path.posix.isAbsolute(remotePath) || path.win32.isAbsolute(remotePath));
    };
    RemotePathTransformer.prototype.getClientPathFromTargetPath = function (remotePath) {
        if (!this.shouldMapPaths(remotePath))
            return remotePath;
        var relPath = relative(this._remoteRoot, remotePath);
        var localPath = join(this._localRoot, relPath);
        localPath = utils.fixDriveLetterAndSlashes(localPath);
        logger.log("Mapped remoteToLocal: " + remotePath + " -> " + localPath);
        return localPath;
    };
    RemotePathTransformer.prototype.getTargetPathFromClientPath = function (localPath) {
        if (!this.shouldMapPaths(localPath))
            return localPath;
        var relPath = relative(this._localRoot, localPath);
        var remotePath = join(this._remoteRoot, relPath);
        remotePath = utils.fixDriveLetterAndSlashes(remotePath, /*uppercaseDriveLetter=*/ true);
        logger.log("Mapped localToRemote: " + localPath + " -> " + remotePath);
        return remotePath;
    };
    return RemotePathTransformer;
}(basePathTransformer_1.BasePathTransformer));
exports.RemotePathTransformer = RemotePathTransformer;
/**
 * Cross-platform path.relative
 */
function relative(a, b) {
    return a.match(/^[A-Za-z]:/) ?
        path.win32.relative(a, b) :
        path.posix.relative(a, b);
}
/**
 * Cross-platform path.join
 */
function join(a, b) {
    return a.match(/^[A-Za-z]:/) ?
        path.win32.join(a, b) :
        path.posix.join(a, b);
}

//# sourceMappingURL=remotePathTransformer.js.map
