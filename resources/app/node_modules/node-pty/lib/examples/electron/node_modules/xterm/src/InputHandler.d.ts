import { IInputHandler } from './Interfaces';
export declare class InputHandler implements IInputHandler {
    private _terminal;
    constructor(_terminal: any);
    addChar(char: string, code: number): void;
    bell(): void;
    lineFeed(): void;
    carriageReturn(): void;
    backspace(): void;
    tab(): void;
    shiftOut(): void;
    shiftIn(): void;
    insertChars(params: number[]): void;
    cursorUp(params: number[]): void;
    cursorDown(params: number[]): void;
    cursorForward(params: number[]): void;
    cursorBackward(params: number[]): void;
    cursorNextLine(params: number[]): void;
    cursorPrecedingLine(params: number[]): void;
    cursorCharAbsolute(params: number[]): void;
    cursorPosition(params: number[]): void;
    cursorForwardTab(params: number[]): void;
    eraseInDisplay(params: number[]): void;
    eraseInLine(params: number[]): void;
    insertLines(params: number[]): void;
    deleteLines(params: number[]): void;
    deleteChars(params: number[]): void;
    scrollUp(params: number[]): void;
    scrollDown(params: number[]): void;
    eraseChars(params: number[]): void;
    cursorBackwardTab(params: number[]): void;
    charPosAbsolute(params: number[]): void;
    HPositionRelative(params: number[]): void;
    repeatPrecedingCharacter(params: number[]): void;
    sendDeviceAttributes(params: number[]): void;
    linePosAbsolute(params: number[]): void;
    VPositionRelative(params: number[]): void;
    HVPosition(params: number[]): void;
    tabClear(params: number[]): void;
    setMode(params: number[]): void;
    resetMode(params: number[]): void;
    charAttributes(params: number[]): void;
    deviceStatus(params: number[]): void;
    softReset(params: number[]): void;
    setCursorStyle(params?: number[]): void;
    setScrollRegion(params: number[]): void;
    saveCursor(params: number[]): void;
    restoreCursor(params: number[]): void;
}
