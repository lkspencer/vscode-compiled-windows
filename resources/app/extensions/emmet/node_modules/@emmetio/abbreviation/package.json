{
  "_args": [
    [
      {
        "raw": "@emmetio/abbreviation@https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
        "scope": "@emmetio",
        "escapedName": "@emmetio%2fabbreviation",
        "name": "@emmetio/abbreviation",
        "rawSpec": "https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
        "spec": "https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
        "type": "remote"
      },
      "C:\\dev\\vscode\\extensions\\emmet"
    ]
  ],
  "_from": "@emmetio/abbreviation@>=0.6.1 <0.7.0",
  "_id": "@emmetio/abbreviation@0.6.1",
  "_inCache": true,
  "_location": "/@emmetio/abbreviation",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@emmetio/abbreviation@https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
    "scope": "@emmetio",
    "escapedName": "@emmetio%2fabbreviation",
    "name": "@emmetio/abbreviation",
    "rawSpec": "https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
    "spec": "https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/@emmetio/expand-abbreviation",
    "/@emmetio/html-snippets-resolver"
  ],
  "_resolved": "https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
  "_shasum": "1255b3f468bc610dd6ea9dd2f70f3afa92027c26",
  "_shrinkwrap": null,
  "_spec": "@emmetio/abbreviation@https://registry.npmjs.org/@emmetio/abbreviation/-/abbreviation-0.6.1.tgz",
  "_where": "C:\\dev\\vscode\\extensions\\emmet",
  "author": {
    "name": "Sergey Chikuyonok",
    "email": "serge.che@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/emmetio/abbreviation/issues"
  },
  "dependencies": {
    "@emmetio/node": "^0.1.2",
    "@emmetio/stream-reader": "^2.0.0",
    "@emmetio/stream-reader-utils": "^0.1.0"
  },
  "description": "Emmet standalone abbreviation parser",
  "devDependencies": {
    "babel-plugin-transform-es2015-modules-commonjs": "^6.18.0",
    "babel-register": "^6.18.0",
    "mocha": "^3.1.2",
    "rollup": "^0.41.1"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/emmetio/abbreviation#readme",
  "keywords": [
    "emmet",
    "abbreviation"
  ],
  "license": "MIT",
  "main": "dist/abbreviation.cjs.js",
  "module": "dist/abbreviation.es.js",
  "name": "@emmetio/abbreviation",
  "optionalDependencies": {},
  "readme": "# Emmet abbreviation parser [![Build Status](https://travis-ci.org/emmetio/abbreviation.svg?branch=master)](https://travis-ci.org/emmetio/abbreviation)\n\nReference parser implementation for [Emmet](http://emmet.io) project. Parser takes an abbreviation string and produces a tree. This tree can then be analyzed, updated etc., similar to DOM tree. Use it to produce a string output afterwards.\n\nNote that this module *does not* produce a tree that can be used for final HTML output: the tree might miss tag names, predefined attributes, resolved snippets and so on. The goal of this parser is to be a basic embeddable building block for projects that wish to utilize Emmet abbreviations syntax.\n\nIf you need a complete HTML or CSS abbreviation expander, you should transform parsed abbreviation tree via [`@emmetio/html-transform`](https://github.com/emmetio/html-transform) or `@emmetio/css-tansform` as well.\n\n## Usage\n\nYou can install it via npm:\n\n```bash\nnpm install @emmetio/abbreviation\n```\n\nThen add it into your project:\n\n```js\n'use strict';\nimport parseAbbreviation from '@emmetio/abbreviation';\n\nconst tree = parseAbbreviation('div#foo>span.bar*3');\ntree.walk((node, level) => {\n\tlet pad = '';\n\twhile (level--) {\n\t\tpad += '  ';\n\t}\n\tconsole.log('%s%s', level, node.name);\n});\n```\n\nAfter abbreviation is expanded, use returned tree to read and update via [DOM-like API](/lib/node.js).\n\nThere are two types of nodes in returned tree:\n\n* *Element node* is a basic node with name, attributes and/or text content. E.g. an element that can be represented somehow.\n* *Grouping node* is used to group sub-nodes and doesn’t has its own representation. It it mostly used to repeat a set of elements, for example `a>(b+c)*3`. Such nodes has `node.isGroup` set to `true`.\n\n## Abbreviation syntax\n\nEmmet abbreviation has the following basic parts:\n\n```\nname.class#id[attributes?, ...]{text value}*repeater/\n```\n\n* `name` — element name, like `div`, `span` etc. Stored as `node.name` property.\n* `[attributes]` — list of attributes. Each attribute is stored as [`Attribute`](/lib/attribute.js) instance and can be accessed by `node.getAttribute(name)`. Each attribute can be written in different formats:\n\t* `attr` — attribute with empty value.\n\t* `attr=value` — attribute with value. The `value` may contain any character except space or `]`.\n\t* `attr=\"value\"` or `attr='value'` — attribute with value in quotes. Quotes are automatically removed.\n\t* `attr.` — boolean attribute, e.g. attribute without value, like `required` in `<input>`.\n\t* `./non/attr/value` — value for default attribute. In other words, anything that doesn’t match a attribute name characters. Can be a single- or double-quotted as well. Default attribute is stored with `null` as name and should be used later, for example, to resolve predefined attributes.\n* `.class` — shorthand for `class` attribute. Note that an element can have multiple classes, like `.class1.class2.class3`.\n* `#id` — shorthand for `id` attribute.\n* `{text}` — node’s text content\n* `*N` — element repeater, tells parser to create `N` copies of given node.\n* `/` — optional self-closing operator. Marks element with `node.selfClosing = true`.\n\n### Operators\n\nEach element of abbreviation must be separated with any of these operators:\n\n```\nelem1+elem2>elem3\n```\n\n* `+` — sibling operator, adds next element as a next sibling of current element in tree.\n* `>` — child operator, adds next element as a child of current element.\n* `^` — climb-up operator, adds next element as a child of current element’s parent node. Multiple climb-up operators are allowed, each operator moves one level up by tree.\n\n### Groups\n\nA set of elements could be grouped using `()`, mostly for repeating and for easier elements nesting:\n\n```\na>(b>c+d)*4+(e+f)\n```\n\nGroups can be optionally concatenated with `+` operator.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/emmetio/abbreviation.git"
  },
  "scripts": {
    "build": "rollup -c",
    "prepublish": "npm run test && npm run build",
    "test": "mocha"
  },
  "version": "0.6.1"
}
