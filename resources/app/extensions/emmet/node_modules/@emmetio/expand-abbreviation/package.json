{
  "_args": [
    [
      {
        "raw": "@emmetio/expand-abbreviation@https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
        "scope": "@emmetio",
        "escapedName": "@emmetio%2fexpand-abbreviation",
        "name": "@emmetio/expand-abbreviation",
        "rawSpec": "https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
        "spec": "https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
        "type": "remote"
      },
      "C:\\dev\\vscode\\extensions\\emmet"
    ]
  ],
  "_from": "@emmetio/expand-abbreviation@>=0.5.4 <0.6.0",
  "_id": "@emmetio/expand-abbreviation@0.5.7",
  "_inCache": true,
  "_location": "/@emmetio/expand-abbreviation",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@emmetio/expand-abbreviation@https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
    "scope": "@emmetio",
    "escapedName": "@emmetio%2fexpand-abbreviation",
    "name": "@emmetio/expand-abbreviation",
    "rawSpec": "https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
    "spec": "https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
  "_shasum": "13e3a2ad3bb48e2874fea5de3abac4801b25bb2c",
  "_shrinkwrap": null,
  "_spec": "@emmetio/expand-abbreviation@https://registry.npmjs.org/@emmetio/expand-abbreviation/-/expand-abbreviation-0.5.7.tgz",
  "_where": "C:\\dev\\vscode\\extensions\\emmet",
  "author": {
    "name": "Sergey Chikuyonok",
    "email": "serge.che@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/emmetio/expand-abbreviation/issues"
  },
  "dependencies": {
    "@emmetio/abbreviation": "^0.6.1",
    "@emmetio/css-abbreviation": "^0.3.1",
    "@emmetio/css-snippets-resolver": "^0.2.5",
    "@emmetio/html-snippets-resolver": "^0.1.4",
    "@emmetio/html-transform": "^0.3.2",
    "@emmetio/lorem": "^1.0.1",
    "@emmetio/markup-formatters": "^0.3.3",
    "@emmetio/output-profile": "^0.1.5",
    "@emmetio/snippets": "^0.2.3",
    "@emmetio/snippets-registry": "^0.3.1",
    "@emmetio/stylesheet-formatters": "^0.1.2",
    "@emmetio/variable-resolver": "^0.2.1",
    "mocha": "^3.4.1"
  },
  "description": "Reference implementation of Emmet abbreviation expander",
  "devDependencies": {
    "babel-plugin-transform-es2015-modules-commonjs": "^6.22.0",
    "babel-register": "^6.22.0",
    "mocha": "^3.3.0",
    "rollup": "^0.41.4",
    "rollup-plugin-node-resolve": "^2.0.0"
  },
  "homepage": "https://github.com/emmetio/expand-abbreviation#readme",
  "keywords": [
    "emmet",
    "abbreviation",
    "expand"
  ],
  "license": "MIT",
  "main": "dist/expand.cjs.js",
  "module": "dist/expand.es.js",
  "name": "@emmetio/expand-abbreviation",
  "optionalDependencies": {},
  "readme": "# [Emmet](http://emmet.io) abbreviation expander\n\nReference implementation of Emmet’s “Expand Abbreviation” action.\n\n```js\nimport { expand } from '@emmetio/expand-abbreviation';\n\nconsole.log(expand('ul.nav>.nav-item{Item $}*2'));\n// outputs:\n// <ul class=\"nav\">\n//   <li class=\"nav-item\">Item 1</li>\n//   <li class=\"nav-item\">Item 2</li>\n// </ul>\n\n// use XHTML-style output\nconsole.log(expand('img[src=image.png]', {\n    profile: {\n        selfClosingStyle: 'xhtml'\n    }\n}));\n// outputs: <img src=\"image.png\" alt=\"\" />\n\n// Output in Slim syntax\nconsole.log(expand('ul.nav>.nav-item{Item $}*2', {syntax: 'slim'}));\n// outputs:\n// ul.nav\n//   li.nav-item Item 1\n//   li.nav-item Item 2\n```\n\n## API\n\nThis module exports two functions: `parse(abbr, options)` and `expand(abbr, options)`.\n\nThe `parse(abbr, options)` function [parses abbreviation into tree](https://github.com/emmetio/abbreviation), applies various transformations required for proper output and returns parsed tree. The `expand(abbr, options)` does the same but returns formatted string. In most cases you should use `expand(abbr, options)` only but if you want to update parsed abbreviation somehow, you can `parse()` abbreviation first, update parsed tree and then `expand()` it:\n\n```js\nimport { parse, expand } from '@emmetio/expand-abbreviation';\n\n// 1. Parse string abbreviation into tree\nconst tree = parse('ul>.item*3');\n\n// 2. Walk on each tree node, update them somehow\ntree.walk(node => { ... });\n\n// 3. Output result\nconsole.log(expand(tree));\n```\n\n### Options\n\nBoth `parse()` and `expand()` methods accept the following options:\n\n* `syntax` (string): abbreviation output syntax. Currently supported syntaxes are: `html`, `slim`, `pug`, `haml`.\n* `field(index, placeholder)` (function): field/tabstop generator for host editor. Most editors support TextMate-style fields: `${0}` or `${1:placeholder}`. For TextMate-style fields this function will look like this:\n\n```js\nconst field = (index, placeholder) => `\\${${index}${placeholder ? ':' + placeholder : ''}}`;\n```\n\n> Emmet natively supports TextMate fields and provides [module for parsing them](https://github.com/emmetio/field-parser).\n\n* `text` (string or array of strings): insert given text string(s) into expanded abbreviation. If array of strings is given, the implicitly repeated element (e.g. `li*`) will be repeated by the amount of items in array.\n* `profile` (object or [`Profile`](https://github.com/emmetio/output-profile)): either predefined [output profile](https://github.com/emmetio/output-profile) or options for output profile. Used for by [markup formatters](https://github.com/emmetio/markup-formatters) to shape-up final output.\n* `variables` (object): custom variables for [variable resolver](https://github.com/emmetio/variable-resolver).\n* `snippets` (object, array of objects or [`SnippetsRegistry`](https://github.com/emmetio/snippets-registry)): custom predefined snippets for abbreviation. The expanded abbreviation will try to match given snippets that may contain custom elements, predefined attributes etc. May also contain array of items: either snippets (object) or references to [default syntax snippets](https://github.com/emmetio/snippets) (string; the key in default snippets hash).\n* `addons` (object): hash of [additional transformations](https://github.com/emmetio/html-transform/tree/master/lib/addons) that should be applied to expanded abbreviation, like BEM or JSX. Since these transformations introduce side-effect, they are disabled by default and should be enabled by providing a transform name as key and transform options as value:\n\n```js\n{\n    bem: {element: '--'}, // enable transform & override options\n    jsx: true // no options, just enable transform\n}\n```\n\n* `format` (object): additional options for output formatter. Currently, [HTML element commenting](https://github.com/emmetio/markup-formatters/blob/master/format/html.js#L33) is the only supported format option.\n\nSee [`test`](/test) folder for usage examples.\n\n## Design goals\n\nThis module is just an umbrella projects that combines various stand-alone submodules into a unified process for parsing and outputting Emmet abbreviations. Thus, you can create your own “Expand Abbreviation” implementation that can re-use these submodules with additional tweaks and transforms that matches your requirements.\n\nThe standard abbreviation expanding workflow:\n\n1. [Parse Emmet abbreviation](https://github.com/emmetio/abbreviation) into DOM-like tree.\n1. [Prepare parsed tree for markup output](https://github.com/emmetio/html-transform). This step includes implicit name resolving (`.item` → `div.item`), item numbering (`.item$*2` → `.item1+.item2`) and so on.\n1. Match tree nodes with [predefined snippets](https://github.com/emmetio/snippets). Snippets are basically another Emmet abbreviations that define element shape (name, attributes, self-closing etc.).\n1. [Resolve variables](https://github.com/emmetio/variable-resolver) in parsed tree.\n1. Convert parsed abbreviation to formatted string using [markup formatters](https://github.com/emmetio/markup-formatters).\n\n## Build targets\n\n`@emmetio/expand-abbreviation` NPM module is available in two flavors: CommonJS and ES6 modules. There’s also a complete, zero-dependency UMD module suitable for browsers (see `dist/expand-full.js`).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/emmetio/expand-abbreviation.git"
  },
  "scripts": {
    "build": "rollup -c && npm run build:full",
    "build:full": "rollup -c --environment BUILD_FULL",
    "prepublish": "npm run test && npm run build",
    "test": "mocha"
  },
  "version": "0.5.7"
}
