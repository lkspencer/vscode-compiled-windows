(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", '../parser/htmlScanner', 'vscode-languageserver-types', '../utils/paths', '../utils/strings', 'vscode-uri'], factory);
    }
})(function (require, exports) {
    /*---------------------------------------------------------------------------------------------
     *  Copyright (c) Microsoft Corporation. All rights reserved.
     *  Licensed under the MIT License. See License.txt in the project root for license information.
     *--------------------------------------------------------------------------------------------*/
    'use strict';
    var htmlScanner_1 = require('../parser/htmlScanner');
    var vscode_languageserver_types_1 = require('vscode-languageserver-types');
    var paths = require('../utils/paths');
    var strings = require('../utils/strings');
    var vscode_uri_1 = require('vscode-uri');
    function stripQuotes(url) {
        return url
            .replace(/^'([^']+)'$/, function (substr, match1) { return match1; })
            .replace(/^"([^"]+)"$/, function (substr, match1) { return match1; });
    }
    function getWorkspaceUrl(modelAbsoluteUri, rootAbsoluteUrl, tokenContent) {
        if (/^\s*javascript\:/i.test(tokenContent) || /^\s*\#/i.test(tokenContent)) {
            return null;
        }
        if (/^\s*https?:\/\//i.test(tokenContent) || /^\s*file:\/\//i.test(tokenContent)) {
            // Absolute link that needs no treatment
            return tokenContent.replace(/^\s*/g, '');
        }
        if (/^\s*\/\//i.test(tokenContent)) {
            // Absolute link (that does not name the protocol)
            var pickedScheme = 'http';
            if (modelAbsoluteUri.scheme === 'https') {
                pickedScheme = 'https';
            }
            return pickedScheme + ':' + tokenContent.replace(/^\s*/g, '');
        }
        var modelPath = paths.dirname(modelAbsoluteUri.path);
        var alternativeResultPath = null;
        if (tokenContent.length > 0 && tokenContent.charAt(0) === '/') {
            alternativeResultPath = tokenContent;
        }
        else {
            alternativeResultPath = paths.join(modelPath, tokenContent);
            alternativeResultPath = alternativeResultPath.replace(/^(\/\.\.)+/, '');
        }
        var potentialResult = modelAbsoluteUri.with({ path: alternativeResultPath }).toString(true);
        var rootAbsoluteUrlStr = rootAbsoluteUrl && rootAbsoluteUrl.toString(true);
        if (rootAbsoluteUrlStr && strings.startsWith(modelAbsoluteUri.toString(true), rootAbsoluteUrlStr)) {
            // The `rootAbsoluteUrl` is set and matches our current model
            // We need to ensure that this `potentialResult` does not escape `rootAbsoluteUrl`
            var commonPrefixLength = strings.commonPrefixLength(rootAbsoluteUrlStr, potentialResult);
            if (strings.endsWith(rootAbsoluteUrlStr, '/')) {
                commonPrefixLength = potentialResult.lastIndexOf('/', commonPrefixLength) + 1;
            }
            return rootAbsoluteUrlStr + potentialResult.substr(commonPrefixLength);
        }
        return potentialResult;
    }
    function createLink(document, rootAbsoluteUrl, attributeValue, startOffset, endOffset) {
        var documentUri = vscode_uri_1.default.parse(document.uri);
        var tokenContent = stripQuotes(attributeValue);
        if (tokenContent.length < attributeValue.length) {
            startOffset++;
            endOffset--;
        }
        var workspaceUrl = getWorkspaceUrl(documentUri, rootAbsoluteUrl, tokenContent);
        if (!workspaceUrl) {
            return null;
        }
        return {
            range: vscode_languageserver_types_1.Range.create(document.positionAt(startOffset), document.positionAt(endOffset)),
            target: workspaceUrl
        };
    }
    function findDocumentLinks(document, workspacePath) {
        var newLinks = [];
        var rootAbsoluteUrl = null;
        if (workspacePath) {
            // The workspace can be null in the no folder opened case
            if (workspacePath.charAt(workspacePath.length - 1) !== '/') {
                workspacePath = workspacePath + '/';
            }
            rootAbsoluteUrl = vscode_uri_1.default.parse(workspacePath);
        }
        var scanner = htmlScanner_1.createScanner(document.getText(), 0);
        var token = scanner.scan();
        var afterHrefOrSrc = false;
        while (token !== htmlScanner_1.TokenType.EOS) {
            switch (token) {
                case htmlScanner_1.TokenType.AttributeName:
                    var attributeName = scanner.getTokenText();
                    afterHrefOrSrc = attributeName === 'src' || attributeName === 'href';
                    break;
                case htmlScanner_1.TokenType.AttributeValue:
                    if (afterHrefOrSrc) {
                        var attributeValue = scanner.getTokenText();
                        var link = createLink(document, rootAbsoluteUrl, attributeValue, scanner.getTokenOffset(), scanner.getTokenEnd());
                        if (link) {
                            newLinks.push(link);
                        }
                        afterHrefOrSrc = false;
                    }
                    break;
            }
            token = scanner.scan();
        }
        return newLinks;
    }
    exports.findDocumentLinks = findDocumentLinks;
});
//# sourceMappingURL=htmlLinks.js.map