/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
const vscode_debugadapter_1 = require("vscode-debugadapter");
const utils = require("../utils");
class StoppedEvent2 extends vscode_debugadapter_1.StoppedEvent {
    constructor(reason, threadId, exception_text) {
        super(reason, threadId, exception_text);
        switch (reason) {
            case 'step':
                this.body.description = utils.localize('reason.description.step', "Paused on step");
                break;
            case 'breakpoint':
                this.body.description = utils.localize('reason.description.breakpoint', "Paused on breakpoint");
                break;
            case 'exception':
                this.body.description = utils.localize('reason.description.exception', "Paused on exception");
                break;
            case 'pause':
                this.body.description = utils.localize('reason.description.user_request', "Paused on user request");
                break;
            case 'entry':
                this.body.description = utils.localize('reason.description.entry', "Paused on entry");
                break;
            case 'debugger_statement':
                this.body.description = utils.localize('reason.description.debugger_statement', "Paused on debugger statement");
                break;
            case 'frame_entry':
                this.body.description = utils.localize('reason.description.restart', "Paused on frame entry");
                break;
            case 'promise_rejection':
                this.body.description = utils.localize('reason.description.promiseRejection', "Paused on promise rejection");
                break;
            default:
                this.body.description = 'Unknown pause reason';
                break;
        }
    }
}
exports.StoppedEvent2 = StoppedEvent2;

//# sourceMappingURL=stoppedEvent.js.map
