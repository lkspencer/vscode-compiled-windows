/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BaseVariableContainer = (function () {
    function BaseVariableContainer(objectId) {
        this.objectId = objectId;
    }
    BaseVariableContainer.prototype.expand = function (adapter, filter, start, count) {
        return adapter.getVariablesForObjectId(this.objectId, filter, start, count);
    };
    return BaseVariableContainer;
}());
exports.BaseVariableContainer = BaseVariableContainer;
var PropertyContainer = (function (_super) {
    __extends(PropertyContainer, _super);
    function PropertyContainer() {
        _super.apply(this, arguments);
    }
    PropertyContainer.prototype.setValue = function (adapter, name, value) {
        return adapter.setPropertyValue(this.objectId, name, value);
    };
    return PropertyContainer;
}(BaseVariableContainer));
exports.PropertyContainer = PropertyContainer;
var ScopeContainer = (function (_super) {
    __extends(ScopeContainer, _super);
    function ScopeContainer(frameId, scopeIndex, objectId, thisObj, returnValue) {
        _super.call(this, objectId);
        this._thisObj = thisObj;
        this._returnValue = returnValue;
        this._frameId = frameId;
        this._scopeIndex = scopeIndex;
    }
    /**
     * Call super then insert the 'this' object if needed
     */
    ScopeContainer.prototype.expand = function (adapter, filter, start, count) {
        var _this = this;
        // No filtering in scopes right now
        return _super.prototype.expand.call(this, adapter, 'all', start, count).then(function (variables) {
            if (_this._thisObj) {
                // If this is a scope that should have the 'this', prop, insert it at the top of the list
                return _this.insertRemoteObject(adapter, variables, 'this', _this._thisObj);
            }
            return variables;
        }).then(function (variables) {
            if (_this._returnValue) {
                return _this.insertRemoteObject(adapter, variables, 'Return value', _this._returnValue);
            }
            return variables;
        });
    };
    ScopeContainer.prototype.setValue = function (adapter, name, value) {
        return adapter.setVariableValue(this._frameId, this._scopeIndex, name, value);
    };
    ScopeContainer.prototype.insertRemoteObject = function (adapter, variables, name, obj) {
        return adapter.remoteObjectToVariable(name, obj).then(function (variable) {
            variables.unshift(variable);
            return variables;
        });
    };
    return ScopeContainer;
}(BaseVariableContainer));
exports.ScopeContainer = ScopeContainer;
function isIndexedPropName(name) {
    return !isNaN(parseInt(name, 10));
}
exports.isIndexedPropName = isIndexedPropName;

//# sourceMappingURL=variables.js.map
